import{_ as a,c as o,o as r,ag as n}from"./chunks/framework.BmLMQRXF.js";const h=JSON.parse('{"title":"实习","description":"","frontmatter":{},"headers":[],"relativePath":"coding/实习.md","filePath":"coding/实习.md"}'),e={name:"coding/实习.md"};function s(i,t,p,g,l,d){return r(),o("div",null,t[0]||(t[0]=[n('<h1 id="实习" tabindex="-1">实习 <a class="header-anchor" href="#实习" aria-label="Permalink to &quot;实习&quot;">​</a></h1><h2 id="mysql" tabindex="-1">MySQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MySQL&quot;">​</a></h2><p>MySQL，一种广泛使用的<strong>关系型</strong>数据库管理系统。</p><h3 id="索引结构" tabindex="-1">索引结构 <a class="header-anchor" href="#索引结构" aria-label="Permalink to &quot;索引结构&quot;">​</a></h3><p><strong>B树索引</strong>：B树是一种平衡多路查找树，所有节点的孩子个数的最大值称为B树的阶，通常用m表示。每个节点最多有m - 1个关键字，并且以升序排列。B树索引可以快速定位数据，减少磁盘I/O操作。</p><p><strong>B+树索引</strong>：B+树是B树的一种变体，与B树的主要区别在于：所有数据记录都存储在叶子节点中，非叶子节点只存储键值和指针；叶子节点之间通过双向链表连接，方便范围查询。</p><p><strong>哈希索引</strong>：哈希索引基于哈希表实现，通过对索引列进行哈希运算，将数据存储在哈希表中。哈希索引的查找速度非常快，适用于等值查询，但不支持范围查询。</p><h3 id="acid原理" tabindex="-1">ACID原理 <a class="header-anchor" href="#acid原理" aria-label="Permalink to &quot;ACID原理&quot;">​</a></h3><p><strong>原子性（Atomicity）</strong>：事务中的所有操作要么全部执行成功，要么全部回滚，就像一个原子一样不可分割。这是通过日志来实现的，在事务执行前，会将操作记录在日志中，如果事务执行失败，可以根据日志进行回滚。</p><p><strong>一致性（Consistency）</strong>：事务执行前后，数据库的完整性约束没有被破坏。数据库通过各种约束（如主键约束、外键约束等）和事务的原子性来保证一致性。</p><p><strong>隔离性（Isolation）</strong>：多个事务并发执行时，相互之间不会产生干扰。MySQL通过锁机制和事务隔离级别来实现隔离性。</p><p><strong>持久性（Durability）</strong>：事务一旦提交，其对数据库的修改就会永久保存。这是通过将事务日志持久化到磁盘来实现的。</p><h3 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-label="Permalink to &quot;事务&quot;">​</a></h3><p><strong>事务的概念</strong>：事务是一组数据库操作的集合，这些操作要么全部成功执行，要么全部回滚，保证了数据库的一致性和完整性。</p><p><strong>事务的操作</strong>：在MySQL中，可以使用START TRANSACTION或BEGIN语句开始一个事务，使用COMMIT语句提交事务，使用ROLLBACK语句回滚事务。</p><p><strong>事务的隔离级别</strong>：MySQL支持四种事务隔离级别，分别是读未提交（Read Uncommitted）、读已提交（Read Committed）、可重复读（Repeatable Read）和串行化（Serializable）。不同的隔离级别会影响事务的并发性能和数据的一致性。</p><h3 id="锁机制" tabindex="-1">锁机制 <a class="header-anchor" href="#锁机制" aria-label="Permalink to &quot;锁机制&quot;">​</a></h3><p><strong>共享锁（Shared Lock）</strong>：又称读锁，允许一个事务读取数据，但不允许其他事务修改数据。多个事务可以同时获取共享锁，实现并发读取。</p><p><strong>排他锁（Exclusive Lock）</strong>：又称写锁，只允许一个事务对数据进行修改，其他事务在该事务释放排他锁之前，无法获取任何锁。</p><p><strong>行锁</strong>：行锁是对表中的某一行数据进行锁定，粒度最小，并发性能较好，但开销较大。</p><p><strong>表锁</strong>：表锁是对整个表进行锁定，粒度最大，并发性能较差，但开销较小。</p><p><strong>意向锁</strong>：意向锁是一种表级锁，用于表示事务对表中的行或页的锁状态。意向锁分为意向共享锁（IS）和意向排他锁（IX）。</p><h3 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h3><p><strong>重做日志（Redo Log）</strong>：用于记录事务对数据库的修改操作，在数据库发生故障时，可以通过重做日志将数据库恢复到故障前的状态。</p><p><strong>回滚日志（Undo Log）</strong>：用于记录事务对数据库的修改操作的逆操作，在事务回滚时，可以通过回滚日志将数据库恢复到事务开始前的状态。</p><p><strong>二进制日志（Binary Log）</strong>：用于记录数据库的所有更改操作，包括数据的插入、更新和删除等。二进制日志可以用于数据备份、恢复和主从复制等。</p><p><strong>慢查询日志（Slow Query Log）</strong>：用于记录执行时间超过指定阈值的查询语句，帮助开发人员找出性能瓶颈，优化查询语句。</p>',27)]))}const m=a(e,[["render",s]]);export{h as __pageData,m as default};
